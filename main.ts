import { AES } from "https://deno.land/x/god_crypto/aes.ts";
import { parse } from "https://deno.land/std/flags/mod.ts";
import { writeJson, existsSync } from "https://deno.land/std/fs/mod.ts";

/// CONSTANTS:

const TIMER = "password generation";

const parsedArgs = parse(Deno.args);
if (parsedArgs.help) {
  console.log(
    "This script lets you generate secure passwords based on your weak rememberable passwords (you only need one to use it effectively)",
  );
  console.log("To use this script please run the script as follows:");
  console.log(
    "deno main.ts --unstable --allow-read --allow-write --label <label_for_password> --pwd <your_weak_password>",
  );
  console.log("Example: ");
  console.log(
    "deno main.ts --unstable --allow-read --allow-write --label FB_My_Fb_Name --pwd myweakpassword123",
  );
  console.log(
    "you can then use the password generated by the script as your true password for the account",
  );
  console.log(
    "If you happen to forget it you can use this script again to generate it back using the same --label and same --pwd",
  );
  console.log(
    "You can make the password more secure by adding --round flag followed by a number > 1, it will take more time though",
  );
  console.log("NO NEED FOR UNTRUSTWORTHY THIRD PARTY APPS ;)");
  console.log(
    "PS: Make sure to remember the label that you provide for the password as it is very important to be able to regenerate it in case of losing it",
  );
  console.log(
    "you can add the --save followed by a path to save the result data to a file located in that file",
  );
  Deno.exit();
}
let label = String(parsedArgs.label);
if (!label) {
  console.log(
    "You need to provide a label by adding --label <your_label> to the run arguments",
  );
  Deno.exit();
}
let pwd = String(parsedArgs.pwd);
if (!pwd) {
  console.log(
    "You need to provide the password by adding --pwd <your_password> to the run arguments",
  );
  Deno.exit();
}
const KEY = label.padEnd(32);
const IV = "a06414d52ccf2218c74196c3744c6688".slice(0, 16);
const aes = new AES(KEY, {
  mode: "cbc",
  iv: IV,
});
console.time(TIMER);
console.log("Generating password ...");
let pwdStrong = pwd;
let round = 1;
if (parsedArgs.round) {
  round = Number(parsedArgs.round);
  round = Number.isFinite(round) ? round : 1;
  round = round > 1 ? round : 1; 
}
for (let i = 0; i < round; i++) {
  let cipher = await aes.encrypt(pwdStrong);
  pwdStrong = cipher.base64();
}

const data = {
  password: pwd,
  label: label,
  generation_round_count: round,
  strong_password: pwdStrong,
};
console.log("Result Data: ", data);

if (parsedArgs.save) {
  const path = String(parsedArgs.save);
  console.log("Saving to file in path :", path);
  if (!existsSync(path)) {
    writeJson(path, data);
  }
}
console.timeEnd(TIMER);
